import React, { Component } from 'react';import './App.css';//Filterable Product table that owns the stateclass FilterableProductTable extends Component {    constructor(props) {      super(props);      this.state = {        filterText: '',        inStockOnly: false      }      this.handleUserInput = this.handleUserInput.bind(this);    }    handleUserInput(filterText, inStockOnly) {        this.setState({            filterText: filterText,            inStockOnly: inStockOnly        })    }    render() {      return(        <div>          <SearchBar filterText={this.state.filterText} inStockOnly={this.state.inStockOnly} onUserInput={this.handleUserInput}></SearchBar>          <ProductTable products={this.props.products} filterText={this.state.filterText} inStockOnly={this.state.inStockOnly}></ProductTable>        </div>      )    }}// the search text that entered by the user is state// the checkbox is state// inverse data flowclass SearchBar extends Component {    constructor(props) {        super(props);        this.handleChange = this.handleChange.bind(this);    }    handleChange() {        this.props.onUserInput(            this.refs.filterTextInput.value,            this.refs.isStockOnlyInput.checked        );    }  render(){    return (      <div className="search-bar">        <form>          <input type="search" placeholder="Search..." value={this.props.filterText} onChange={this.handleChange} ref="filterTextInput"/>          <input type="checkbox" checked={this.props.inStockOnly} ref="isStockOnlyInput" onChange={this.handleChange}/>          {' '}          <span>Only show products in stock</span>          <div style={{clear:'both'}}/>        </form>      </div>    )  }}class ProductTable extends Component {  render(){    let rows= [],        lastCategory = null;    this.props.products.forEach((product) => {      if( product.name.indexOf(this.props.filterText) === -1 || (!product.stocked && this.props.inStockOnly)){        return;      }      if(product.category !== lastCategory){        rows.push(<ProductCategoryRow category={product.category} key={product.category}></ProductCategoryRow>);      }      rows.push(<ProductRow product={product} key={product.name}></ProductRow>);      lastCategory = product.category;    });    return (      <table>        <thead>          <tr>            <th>Name</th>            <th>Price</th>          </tr>        </thead>        <tbody>          {rows}        </tbody>      </table>    )  }}class ProductRow extends Component {  render(){    let name = this.props.product.stocked ?                this.props.product.name :                <span className="out-of-stock">{this.props.product.name}</span>;    return (      <tr>        <td>{name}</td>        <td>{this.props.product.price}</td>      </tr>    )  }}class ProductCategoryRow extends Component {  render(){    return (      <tr>        <th colSpan="2">{this.props.category}</th>      </tr>    )  }}class App extends Component {  render() {    return (      <div className="App">        <FilterableProductTable products={this.props.data}>        </FilterableProductTable>      </div>    );  }}export default App;